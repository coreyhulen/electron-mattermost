version: '{build}'
init:
- ps: |
    # The $env:PATH is way too long; try to reduce it a bit.
    # src.: https://gist.github.com/wget/a102f89c301014836aaa49a98dd06ee2
    Write-Host "This is the path: $env:path"
    Write-Host "Reducing too long PATH by removing all the stuff added in Program Files except Git"
    [array]$newPath=($env:path -split ';') | Where-Object { $_ -notlike "C:\Program Files*"}
    $newPath += ($env:path -split ';') | Where-Object { $_ -like "C:\Program Files*\*Git*"}
    $env:path = $newPath -join ';'
    [Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Machine)
    [Environment]::SetEnvironmentVariable("INCLUDE", $env:INCLUDE, [System.EnvironmentVariableTarget]::User)
    Write-Host "This is the new path: $env:path"
    
    Write-Host "Updating choco packages..."
    choco upgrade all --yes
    
    # As we are unable to programmatically determine the install location
    #for the packages (even via Get-AppInstallLocation.ps1 from
    # chocolatey-core.extension), let's detect it ourselves.
    # We are using null coalesce.
    # src.: https://stackoverflow.com/a/19015642/3514658
    
    Write-Host "Installing yarn..."
    choco install yarn --yes
    # Yarn is always installed as a 32 bits based program.
    # C:\Program Files (x86)\Yarn\bin
    $progFile = (${env:ProgramFiles(x86)}, ${env:ProgramFiles} -ne $null)[0]
    $yarnDir = Join-Path -Path "$progFile" -ChildPath "Yarn/bin"
    $env:Path += ";$yarnDir"
    
    # npm is always installed as a nodejs dependency. 64 bits version available.
    # C:\Program Files\nodejs\node_modules\npm\bin
    $progFile = ${env:ProgramFiles}
    $npmDir = Join-Path -Path "$progFile" -ChildPath "nodejs"
    $env:Path += ";$npmDir"
    
    Write-Host "Installing wixtoolset..."
    choco install wixtoolset --yes
    # Wixtoolset is always installed as a 32 bits based program.
    $progFile = (${env:ProgramFiles(x86)}, ${env:ProgramFiles} -ne $null)[0]
    $wixDirs = @(Get-ChildItem -Path $progFile -Recurse -Filter "*wix toolset*" -Attributes Directory -Depth 2)
    $wixDir = Join-Path -Path "$progFile" -ChildPath "$($wixDirs[0])"
    $wixDir = Join-Path -Path "$wixDir" -ChildPath "bin"
    $env:Path += ";$wixDir"
build_script:
- ps: |
    Write-Host "Working directory:"
    Get-Location
    Write-Host "Running yarn..."
    yarn
    Write-Host "Running npm run build..."
    npm run build
    Write-Host "Running npm run package:windows..."
    npm run package:windows
    #Start-Process -FilePath "yarn" -NoNewWindow -Wait -Passthru
    #Start-Process -FilePath "npm" -ArgumentList "run build" -NoNewWindow -Wait -Passthru
    #Start-Process -FilePath "npm" -ArgumentList "run package:windows" -NoNewWindow -Wait -Passthru
    
    Write-Host "Cleaning build dir..."
    Remove-Item .\release\win-ia32-unpacked\resources\app.asar.unpacked\ -Force -Recurse
    Remove-Item .\release\win-unpacked\resources\app.asar.unpacked\ -Force -Recurse
    
    # Convert license to RTF
    $licenseTxtFile = "$(Get-Location)/LICENSE.txt";
    $licenseRtfFile = "$(Get-Location)/resources/windows/license.rtf";
    $licenseNewParagraph = "\par" + [Environment]::NewLine;
    $sw = [System.IO.File]::CreateText($licenseRtfFile);
    $sw.WriteLine("{\rtf1\ansi\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Courier New;}}\pard\qj\f0\fs18");
    $lineToAdd = "";
    $gapDetected = 0;
    # We are relying on introspected C#/.NET rather than the buggy Get-Content
    # cmdlet because Get-Content considers by default a `-Delimiter` to '\n'
    # and thus breaks the purpose of the parser.
    foreach($line in [System.IO.File]::ReadLines($licenseTxtFile)) {
        # trim() is equivalent to .replace("\ \s+", "")
        # We replace one backslash by two. Since the first arg is a regex,
        # we need to escape it.
        # src.: https://stackoverflow.com/a/31324570/3514658
        $sanitizedLine = $line.trim().replace("\\", "\\").replace("{", "\{").replace("}", "\}");
        # Print previous string gathered if gap detected.
        if ([string]::IsNullOrEmpty($sanitizedLine)) {
            $gapDetected++;
            # For first line keep paragraph definition from document head.
            if ($gapDetected -eq 1) {
                $sw.Write($lineToAdd);
            } elseif ($gapDetected -eq 2) {
                $sw.Write($licenseNewParagraph + $lineToAdd);
            } else {
                $sw.Write($licenseNewParagraph + $lineToAdd + $licenseNewParagraph);
            }
            $lineToAdd = "";
            continue;
        }
        # Keep carriage return for first two blocks comprising Copyright and
        # license name statements.
        if ($gapDetected -lt 3) {
            $lineToAdd += $sanitizedLine + $licenseNewParagraph;
            continue;
        }
        # Do not add heading space if the line begins a new paragraph.
        if ($lineToAdd -eq "") {
            $lineToAdd += $sanitizedLine;
            continue;
        }
        $lineToAdd += " " + $sanitizedLine;
    }
    if ($lineToAdd -ne "") {
        $sw.Write([Environment]::NewLine + $licenseNewParagraph + $lineToAdd + "\par");
    }
    $sw.Close();
    
    Copy-Item .\scripts\msi-installer.wxs .\scripts\msi-installer.wxs.bak
    Write-Host "Populating application files for 32 bits version..."
    $xml = New-Object "System.Xml.XmlDocument";
    $xml.Load("$(Get-Location)/scripts/msi-installer.wxs");
    $xmlNode = $xml.Wix.Product.Directory.Directory.Directory.Directory.Component;
    foreach ($item in Get-ChildItem .\release\win-ia32-unpacked\ -Recurse) {
        if ($item.Attributes -eq "Directory") {
            Write-Host "$($item.FullName) is a directory";
            $xmlElement = New-Object "System.Xml.XmlDocument";
        } else {
            Write-Host "$($item.FullName) is a file";
        }
    }
    
test_script:
- ps: |
    npm test
# Please uncomment to have a RDP session, particularly useful to debug
# src.: https://www.appveyor.com/docs/how-to/rdp-to-build-worker/
on_finish:
- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))